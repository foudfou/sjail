#!/bin/sh
set -eu
sjail=$(realpath $0)

freebsd_url=https://download.freebsd.org/releases/amd64/amd64/
zfs_options="-o compress=lz4 -o atime=off"

. /usr/local/etc/sjail.conf
. /usr/local/share/sjail/common.sh

sjail_init() {
    log "Setting up sjail"

    if [ ! -e /usr/local/etc/sjail.conf ]; then
        log_fatal "missing /usr/local/etc/sjail.conf"
    fi

    zfs create ${zfs_options} -o mountpoint=${zfs_mount} ${zfs_pool}

    # templates arbitrarily in sjail pool
    zfs create ${zfs_options} -p ${zfs_pool}/templates

    if ! grep -q '.include "'${zfs_mount}/jails /etc/jail.conf; then
        cat <<EOF > /etc/jail.conf
.include "${zfs_mount}/jails/*/jail.conf";
EOF
    fi

    sysrc_silent jail_enable="YES"
    sysrc_silent jail_parallel_start="YES"

    sysrc_silent cloned_interfaces+="${loopback}"
    service netif cloneup
}

sjail_fetch() {
    local version="$1"
    local nofetch=$(arg_get nofetch "$@")

    log "Creating release ${version}"

    if [ -e "${zfs_mount}/releases/${version}" ]; then
        log_fatal "$version already fetched"
    fi

    zfs create ${zfs_options} -p ${zfs_pool}/releases/${version}

    if [ -n "${nofetch}" ]; then
        fetch "${freebsd_url}/${version}/MANIFEST" -o /tmp/MANIFEST
    fi

    local release_archives="base" a
    for a in ${release_archives}; do
        local archive="${a}.txz"

        if [ -n "${nofetch}" ]; then
            rm -f /tmp/${archive} || true
            fetch "${freebsd_url}/${version}/${archive}" -o /tmp/${archive}
        fi

        local checksum_want=$(grep -w ${archive} /tmp/MANIFEST | cut -f2)
        local checksum_got=$(sha256 -q /tmp/${archive})
        if [ "${checksum_got}" != "${checksum_want}" ]; then
            log_fatal "wrong checksum for ${archive}: ${checksum_got}"
        fi

        tar -xf /tmp/${archive} -C "${zfs_mount}/releases/${version}"
    done
}

sjail_update() {
    local version="$1"
    log "Updating release ${version}"
    freebsd-update --currently-running ${version} -b ${zfs_mount}/releases/${version} fetch install
    # freebsd-update --currently-running ${version} -b ${zfs_mount}/releases/${version} IDS
}

sjail_create() {
    local jail_name="$1"; shift
    local version="$1"; shift
    local ip4=$(arg_get ip4 "$@")
    local ip6=$(arg_get ip6 "$@")
    log "Creating thin jail: $jail_name"

    zfs create ${zfs_options} -p "${zfs_pool}/jails/${jail_name}"

    local jail_path="${zfs_mount}/jails/${jail_name}"
    cat <<EOF > ${jail_path}/fstab
${zfs_mount}/releases/${version} ${jail_path}/root/.ro nullfs ro 0 0
EOF

    local ip4_addr=""
    if [ -n "${ip4}" ]; then
        ip4_addr="ip4.addr = ${ip4};"
    fi
    local ip6_addr=""
    local ip6_mode="ip6 = disable;"
    if [ -n "${ip6}" ]; then
        ip6_addr="ip6.addr = ${ip6};"
        ip6_mode="ip6 = new;"
    fi

    cat << EOF > "${jail_path}/jail.conf"
${jail_name} {
  host.hostname = ${jail_name};
  path = ${jail_path}/root;

  exec.clean;
  exec.consolelog = ${jail_path}/console.log;
  exec.start = '/bin/sh /etc/rc';
  exec.stop = '/bin/sh /etc/rc.shutdown';
  exec.prestart  += "cp /etc/resolv.conf \$path/etc/resolv.conf";
  exec.prestart  += "cp /etc/localtime \$path/etc";
  exec.poststart += "${sjail} _hook_start \$name";
  exec.prestop   += "${sjail} _hook_stop \$name";
  exec.poststop  += "rm \$path/etc/resolv.conf";
  exec.poststop  += "rm \$path/etc/localtime";

  mount.devfs;
  mount.fstab = ${jail_path}/fstab;
  enforce_statfs = 2;
  devfs_ruleset = 4;

  securelevel = 2;
  osrelease = ${version};

  interface = ${loopback};
  ${ip4_addr}
  ${ip6_addr}
  ${ip6_mode}
}
EOF

    mkdir "${jail_path}/root"
    cd "${jail_path}/root"

    mkdir .ro
    mkdir usr
    local ro="bin boot lib libexec rescue sbin usr/bin usr/include usr/lib usr/lib32 usr/libdata usr/libexec usr/sbin usr/share usr/src" l
    for l in ${ro}; do
      ln -Fsf /.ro/${l} ${l}
    done

    local rw=".cshrc .profile COPYRIGHT dev etc media mnt net proc root tmp var usr/obj usr/tests" files
    for files in ${rw}; do
      cp -a "${zfs_mount}/releases/${version}/${files}" "${jail_path}/root/${files}"
    done

    # minor adjustments
    mkdir -p usr/home
    ln -s usr/home home
    touch etc/fstab

    cd -

    sysrc_silent jail_list+="${jail_name}"
}

sjail_destroy() {
    local jail_name="$1"
    log "Destroying thin jail: $jail_name"

    if jls -j ${jail_name} >/dev/null 2>&1; then
        log_fatal "jail running. Stop first."
    fi

    zfs destroy -r ${zfs_pool}/jails/${jail_name}

    sysrc_silent jail_list-="${jail_name}"
}

sjail_list() {
    local format="%-10s %-8s %-13s %15s %3s\n"
    printf "${format}" Jail Status Release

    local all_info=$(jail -e'|' '*' | sort)
    local all=$(echo -e "$all_info" | cut -d'|' -f1 | cut -d= -f2) j
    local running=$(jls -N)
    for j in ${all}; do
        local status=$(output_get_word "${running}" "${j}")
        if [ -n "${status}" ]; then
            status=Up
        else
            status=Down
        fi

        local release=$(output_get_word "${all_info}" "name=${j}")
        release=$(echo -n "${release}" | awk 'BEGIN{RS="|";FS="="} /mount.fstab/ {print $2}')
        if [ -n "${release}" ]; then
            release=$(grep releases "${release}" | cut -d' ' -f1 || true)
            release=${release##*/}
        else
            release=-
        fi

        printf "${format}" ${j} ${status} ${release}
    done
}

sjail_apply() {
    local jail_name="$1"
    local template="$2"
    log "Applying template ${2} on jail ${1}"

    local jail_path="${zfs_mount}/jails/${jail_name}"

    if ! jls -j ${jail_name} >/dev/null 2>&1; then
        log_fatal "jail must be running. Start first."
    fi

    if [ ! -e "${zfs_mount}/templates/${template}" ]; then
        log_fatal "template not found: ${zfs_mount}/templates/${template}"
    fi

    . /usr/local/share/sjail/cmd.sh
    . "${zfs_mount}/templates/${template}"

    jail -rc ${jail_name}
}

# Additional jail start operations
sjail_hook_start() {
    local jail_name="$1"
    local jail_path="${zfs_mount}/jails/${jail_name}"

    . /usr/local/share/sjail/cmd.sh

    local ip4=$(jail_conf_get "${jail_name}" ip4.addr)
    local ip6=$(jail_conf_get "${jail_name}" ip6.addr) ip
    for ip in ${ip4} ${ip6}; do
        pfctl -q -t jails -T add "${ip}"
    done

    if [ -e "${jail_path}/rdr.conf" ]; then
        while read line; do
            grep -q -E '^(#|\s*$)' && continue
            pf_rdr_add "$jail_name" ${line}
        done < "${jail_path}/rdr.conf"
    fi
}

# Additional jail stop operations
sjail_hook_stop() {
    local jail_name="$1"
    local jail_path="${zfs_mount}/jails/${jail_name}"

    . /usr/local/share/sjail/cmd.sh

    local ip4=$(jail_conf_get "${jail_name}" ip4.addr) ip
    local ip6=$(jail_conf_get "${jail_name}" ip6.addr)
    for ip in ${ip4} ${ip6}; do
        pfctl -q -t jails -T delete "${ip}"
    done

    if [ -e "${jail_path}/rdr.conf" ]; then
        pf_rdr_clear "${jail_name}"
    fi
}

usage() {
    cat <<EOF
Usage: `basename $0` [-hv] command [args]

Options:
    -h   help; show this help.
    -v   verbose; show more information.

Commands:
    init                 Setup zpool
    fetch version        Fetch and create base template for version
                         (e.g. 14.1-RELEASE)
    update version       Apply freebsd-update on base template with version.
                         Can be done anytime.
    create name version  Create thin jail from base template with version.
    destroy name         Destroy thin jail.
    list                 List status of all jails.
    apply name template  Apply template on jail.
EOF
}

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

case "$1" in
    help|-h|--help)
        usage
        exit 0
        ;;
    -v)
        log_debug() {
            log "  $*"
        }
        shift
        ;;
esac

if [ "$(id -u)" -ne 0 ]; then
    log_fatal "not root"
fi

command=${1}; shift
case $command in
    init)
        sjail_init
        ;;
    fetch)
        sjail_fetch "$@"
        ;;
    update)
        sjail_update "$@"
        ;;
    create)
        sjail_create "$@"
        ;;
    destroy)
        sjail_destroy "$@"
        ;;
    list)
        sjail_list
        ;;
    apply)
        sjail_apply "$@"
        ;;
    _hook_start)
        sjail_hook_start "$@"
        ;;
    _hook_stop)
        sjail_hook_stop "$@"
        ;;
    *)
        usage
        ;;
esac
